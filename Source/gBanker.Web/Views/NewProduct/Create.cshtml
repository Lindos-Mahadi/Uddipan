@model gBanker.Web.ViewModels.ProductViewModel

@{
    ViewBag.Title = "Product Create";
    Layout = "~/Views/Shared/_LayoutMaster.cshtml";
    //var investors = (System.Collections.Generic.IEnumerable<SelectListItem>)ViewBag.investorList;
    var investor = Model == null ? null : Model.PInvestorListItems;
    var frequency = Model == null ? null : Model.PFrequencyListItems;
    var calcMethod = Model == null ? null : Model.PCalcuationMethodListItems;
    var mProductCode = Model == null ? null : Model.MainProductList;
    var insuranceList = Model == null ? null : Model.InsuranceItemList;
    var duratoinListMasterData = "";
    var duratoinList = Model == null ? null : Model.DurationItemList;
    var productIdentificationList = Model == null ? null : Model.ProductIdentificationItemList;
    var mainProductInsuranceList = Model == null ? null : Model.MainProductInsuranceList;
}

@{
    // Create an instance of the Random class
    Random random = new Random();

    // Generate a random number between 1000 and 9999
    int randomNumber = random.Next(1000, 10000);
}



<script type="text/javascript">

    let durationList;
    $(document).ready(function () {
        onMainProductChanged();
        gBankerDatePicker("CreateDate");
        durationList =@Html.Raw(Json.Encode(@duratoinList));

        //click checkbox
        function toggleInsuranceItemCodeVisibility() {

            var isInsuranceChecked = $("#isInsuranceYes").is(":checked");

            if (isInsuranceChecked) {

                $("#insuranceItemCodeContainer").hide();
                $("#InsuranceItemCode").val("");
                

            } else {

                $("#insuranceItemCodeContainer").show();

            }

        }

        toggleInsuranceItemCodeVisibility();

        $("#isInsuranceYes, #isInsuranceNo").change(function () {

            toggleInsuranceItemCodeVisibility();

        });
    });

    function onpaymentFrequencyChanged() {
        let paymentFrequencyType = $("#PaymentFrequency option:selected").val();

        if (paymentFrequencyType == "M" || paymentFrequencyType == "W") {
            $("#duration").prop("disabled", false);
        }
        else {
            $("#duration").prop("disabled", true);
        }

        //alert('durationList');
        console.log("paymentFrequencyType ", paymentFrequencyType)
        var filteredDuration = [];
        if (paymentFrequencyType == "M") {
            filteredDuration = durationList.filter(item => item.Text.split("-")[0].trim() == "M");
        } else {
            filteredDuration = durationList.filter(item => item.Text.split("-")[0].trim() == "W");
        }
        //alert(filteredDuration);
        console.log("paymentFrequencyType ", filteredDuration);
        var option = '<option value="">Select One</option>';
        $.each(filteredDuration, function (index, value) {
            option += '<option value="' + value.Value + '">' + value.Text +'</option>';
        });
        $('#duration').empty().append(option);
        //duratoinListMasterData = filteredDuration;

    }
    function onDurationChanged() {
        //console.log((Number)($("#duration option:selected").text()));
        //$("#duration").val((Number)($("#duration option:selected").text()));
        
        //console.log($("#duration option:selected").val());
    }
    
    function onMainProductChanged() {
        let mainProduct = $("#MainProduct option:selected").val();
        let newProductCode;
        $.ajax({
            url: '/NewProduct/GetProductMainCodeList',
            type: 'GET',
            dataType: 'json',
            data: { productCode: mainProduct },
            success: function (data) {
                debugger;
                console.log(data);
                /*let currentProducts = data.Records.filter(item => item.MainItemName == mainProduct);
                let currentProducrsCode = [];
                currentProducts.map(item => {
                    currentProducrsCode.push(Number(item.MainProductCode));
                });
                currentProducrsCode.sort();
                newProductCode = currentProducrsCode[currentProducrsCode.length - 1] + 0.01;
                //newProductCode++;
                console.log("newProductCode ", newProductCode);*/
                
                $("#ProductCode").val(data)
            },
            error: function () {

            }
        });
       


    }

    

</script>

@Html.ActionLink("Back to List", "Index", null, new { @class = "pull-right" })

<h2 class="page-title">Product Create</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group" style="display:none">
            @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ProductID, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductType, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.ProductType, investor, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProductType, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">

                    @Html.LabelFor(model => model.PaymentFrequency, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.PaymentFrequency, frequency, new { onchange = "onpaymentFrequencyChanged()", id = "PaymentFrequency", @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.PaymentFrequency, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.DurationID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.DurationID, duratoinList, new { id = "duration", onchange = "onDurationChanged()", @class = "form-control", disabled="disabled" })

                    @Html.ValidationMessageFor(model => model.DurationID, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">

                    @Html.LabelFor(model => model.MainProductCode, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.MainProductCode, mProductCode, new { id = "MainProduct", onchange = "onMainProductChanged()", @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.MainProductCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductCode, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ProductCode, new { htmlAttributes = new { id = "ProductCode", @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductCode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductFullNameEng, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ProductFullNameEng, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductFullNameEng, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductShortNameBng, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ProductShortNameBng, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductShortNameBng, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductFullNameBng, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.ProductFullNameBng, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ProductFullNameBng, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.ProductIdentificationID, htmlAttributes: new { @class = "control-label" })

                    @Html.DropDownListFor(model => model.ProductIdentificationID, productIdentificationList, new { id = "duration", @class = "form-control" })

                    @Html.ValidationMessageFor(model => model.ProductIdentificationID, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="row">
            @*<div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MainProductCode, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.MainProductCode, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MainProductCode, "", new { @class = "text-danger" })
                    </div>
                </div>*@
            @*<div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.MainItemName, htmlAttributes: new { @class = "control-label" })

                        @Html.EditorFor(model => model.MainItemName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.MainItemName, "", new { @class = "text-danger" })
                    </div>
                </div>*@
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LoanInstallment, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.LoanInstallment, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.LoanInstallment, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InterestInstallment, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.InterestInstallment, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.InterestInstallment, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SavingsInstallment, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.SavingsInstallment, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.SavingsInstallment, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MinLimit, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.MinLimit, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.MinLimit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.MaxLimit, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.MaxLimit, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.MaxLimit, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InterestCalculationMethod, htmlAttributes: new { @class = "control-label" })

                    @*@Html.EditorFor(model => model.InterestCalculationMethod, new { htmlAttributes = new { @class = "form-control" } })*@
                    @Html.DropDownListFor(model => model.InterestCalculationMethod, calcMethod, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.InterestCalculationMethod, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InterestRate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.InterestRate, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.InterestRate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IsInsurance, htmlAttributes: new { @class = "control-label" })
                            <div class="checkbox">
                                <div>
                                    @Html.RadioButtonFor(model => model.IsInsurance, true, new { @class = "form-check-input mr-0", id = "isInsuranceYes" })
                                    <label class="" for="isInsuranceYes" style="padding-left:0px;">Yes</label>
                                    @Html.RadioButtonFor(model => model.IsInsurance, false, new { @class = "form-check-input", id = "isInsuranceNo" })
                                    <label class="" for="isInsuranceNo" style="padding-left:0px;">No</label>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-8" id="insuranceItemCodeContainer">
                        <div class="form-group">
                            @*@Html.LabelFor(model => model.InsuranceItemCode, htmlAttributes: new { @class = "control-label" })

        @Html.EditorFor(model => model.InsuranceItemCode, new { htmlAttributes = new { @class = "form-control", defaultValue = "0", required = "required" } })
        @Html.ValidationMessageFor(model => model.InsuranceItemCode, "", new { @class = "text-danger", id = "insuranceItemCodeValidationMsg" })*@

                            @Html.LabelFor(model => model.MainItemName, htmlAttributes: new { @class = "control-label" })

                            @Html.DropDownListFor(model => model.MainItemName, mainProductInsuranceList, new { @class = "form-control",id= "InsuranceItemCode" })
                            @Html.ValidationMessageFor(model => model.MainItemName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.InsuranceItemRate, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.InsuranceItemRate, new { htmlAttributes = new { @class = "form-control", defaultValue = "0" } })
                    @Html.ValidationMessageFor(model => model.InsuranceItemRate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>


        <div class="row">
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.GracePeriod, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.GracePeriod, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.GracePeriod, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.SubMainCategory, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.SubMainCategory, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SubMainCategory, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4">
                <div class="form-group">
                    @Html.LabelFor(model => model.LateFeePercentage, htmlAttributes: new { @class = "control-label" })

                    @Html.EditorFor(model => model.LateFeePercentage, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.LateFeePercentage, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-lg-12">
                <div class="form-group form-action">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>
            </div>

        </div>
    </div>
}



@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/gbUtility")
}


